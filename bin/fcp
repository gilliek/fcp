#!/usr/bin/env ruby
=begin
  _____ ____ ____
 |  ___/ ___|  _ \
 | |_ | |   | |_) |
 |  _|| |___|  __/
 |_|   \____|_|

	FCP stands for FTP Copy. It aims to be a simple CLI tool that performs copy
	through FTP.

	Version:
		1.0.0

	Author:
		Kevin Gillieron <kevin.gillieron@gw-computing.net>

	License:
		BSD 3-clauses (see LICENSE file)
=end

require 'net/ftp'
require 'optparse'

class Logger
	@@verbose_enabled = false

	def self.enable_verbose()  ; @@verbose_enabled = true      ; end
	def self.disable_verbose() ; @@verbose_enabled = false     ; end
	def self.verbose(msg="")   ; puts msg if @@verbose_enabled ; end

	def self.info(msg="") ; puts msg        ; end
	def self.warn(msg="") ; STDERR.puts msg ; end

	def self.err(msg="", status=1)
		STDERR.puts msg
		exit status
	end
end

class FCP
	MODE_ASCII          = 0 # ASCII copy
	MODE_BIN            = 1 # Binary copy
	DEFAULT_CONFIG_PATH = [ENV["HOME"] + "/.config/fcpconfig",
												 ENV["HOME"] + "/.fcpconfig"]
	DEFAULT_PORT        = "21"

	attr_accessor :host      # FTP host. Must contain protocol (ftp://)
	attr_accessor :user      # user if login mode is not anonymous
	attr_accessor :password  # password if login mode is not anonymous
	attr_accessor :port      # FTP port
	attr_accessor :recursive # for copying directories
	attr_accessor :anonymous # false if credentials are needed
	attr_accessor :mode      # transfer mode: ASCII or binary
	attr_accessor :config    # list of possible path for config file
	attr_accessor :dir       # default remote directory
	attr_accessor :safe      # Safe mode (ask before overwriting).

	def initialize
		@port, @mode, @config = DEFAULT_PORT, MODE_BIN, DEFAULT_CONFIG_PATH
		@recursive, @anonymous, @safe = false, false, false
		@dir = ""
	end

	def cp_from_ftp(source, target)
		# TODO
	end

	# copy a given array of files to a remote FTP server.
	def cp_to_ftp(source, target)
		@host, target_dir = extract_host_info(target)
		apply_config
		change_default_port
		target_dir = format_target_dir(target_dir.to_s)

		Net::FTP.open(@host, @user, @password) do |ftp|
			ftp.login if @user.nil?
			source.each do |s|
				if File.directory?(s)
					if @recursive
						write_dir(s, target_dir, ftp)
					else
						Logger.err(
							"'#{s}' is a directory. Use -r to enable recursive copy!")
						# NOTREACHED
					end
				else
					write_file(s, format_target(s, target_dir, ftp), ftp)
				end
			end
		end
	end

	private
		# soooo ugly :(
		def change_default_port
			if @port != DEFAULT_PORT
				Net::FTP.send(:remove_const, :FTP_PORT)
				Net::FTP.const_set(:FTP_PORT, @port)
			end
		end

		# recursively write a directory and its subdirectories
		def write_dir(source, target, ftp)
			# TODO clean this part !
			src_dir = File.basename(source) + "/"
			sep     = target[target.length-1] != "/" ? "/" : ""
			ftp.mkdir(target + sep + File.basename(source))

			Dir[source + "/**/*"].each do |f|
				if File.directory?(f)
					write_dir(f, target, ftp)
				else
					write_file(f, target + src_dir + File.basename(f), ftp)
				end
			end
		end

		def write_file(source, target, ftp)
			safe_check(target, ftp) if @safe

			if @mode == MODE_ASCII
				ftp.puttextfile(source, target)
			else # @mode == MODE_BIN
				ftp.putbinaryfile(source, target)
			end
		end

		def format_target(source, target_dir, ftp)
			return File.basename(source) if target_dir.empty?

			if target_dir[target_dir.length-1] == "/"
				return target_dir + "/" + File.basename(source)
			end

			begin
				list = ftp.ls(target_dir)
				if list.length == 1
					tmp = list[0].split(" ")
					return target_dir if tmp[tmp.length-1] == target_dir
				end
			rescue Net::FTPTempError # it's probably a file!
				return target_dir
			end

			return target_dir + "/" + File.basename(source)
		end

		def yesno(prompt="")
			print "#{prompt} (y/n) "
			answ = gets.sub("\n", "")
			return answ == "y"
		end

		def safe_check(target, ftp)
			begin
				if !ftp.ls(target).nil?
					question = "Would you like to overwrite it ?"
					if !yesno("'#{File.basename(target)}' already exists. #{question}")
						ftp.close
						exit 0
					end
				end
			rescue Net::FTPTempError
				return
			end
		end

		def format_target_dir(target_dir="")
			@dir      += "/" if !@dir.empty? && @dir[@dir.length-1] != "/"
			target_dir = @dir + target_dir
		end

		def extract_host_info(url)
			matches = url.scan(/ftp:\/\/([\w\-.]+):(.*)/)
			return matches[0][0], matches[0][1] # host, target_dir
		end

		def apply_config
			config_hash = parse_config_file
			config      = config_hash[@host] if !config_hash.nil?
			return if config.nil?

			# apply config if params are not overrided by program options
			@host      = config["hostname"] if !config["hostname"].nil?
			@user      = config["user"] if @user.nil? && !config["user"].nil?
			@password  = config["password"] if @password.nil? && !config["password"].nil?
			@port      = config["port"] if @port == DEFAULT_PORT && !config["port"].nil?
			@anonymous = config["auth"] == "anonymous" if !config["auth"].nil?
			@dir       = config["directory"] if !config["directory"].nil?
			@safe      = config["safemode"] == "yes" if !config["safemode"].nil?
		end

		def parse_config_file
			f    = nil
			conf = Hash.new

			@config.each do |path|
					if File.exists?(path)
						f = File.open(path)
						break
					end
			end

			if f == nil
				Logger.verbose("Cannot find configuration file!")
				return
			end

			current_host = nil
			f.readlines.each do |line|
				next if line == "\n" || line[0] == "#" # skip empty lines or comment
				if line =~ /^(\t| +)/
					# TODO raise an exception if current_host.nil?
					matches = line.scan(/(\w+) +(.+)\n$/) # key value
					# TODO raise an exception if matches.length != 2
					conf[current_host][matches[0][0].downcase] = matches[0][1]
				else
					matches = line.scan(/^Host (\w+)\n/i)
					# TODO raise an exception if matches.length != 1
					current_host         = matches[0][0]
					conf[current_host] = Hash.new
				end
			end

			f.close
			return conf
		end
end

begin
	fcp = FCP.new

	# TODO improve help
	opts = OptionParser.new do |o|
		o.banner = "usage: #{File.basename($0)} [options] [source files] [target]\n"
		o.separator(nil)
		o.separator("options:")
		o.on("-a", "--anonymous", "anonymous login (without credentials)") do
			fcp.anonymous = true # enable anonymous login
		end
		o.on("-c", "--config CONFIG_FILE", String, "specific config file") do |c|
			fcp.config = [c, FCP::DEFAULT_CONFIG_PATH].flatten
		end
		o.on("-h", "--help", "show this help") { puts o; exit }
		o.on("-m", "--mode MODE", String, "copy mode (bin or ascii)") do |m|
			if m == "bin"
				fcp.mode = FCP::MODE_BIN
			elsif m == "ascii"
				fcp.mode = FCP::MODE_ASCII
			else
				Logger.err("Mode '#{m}' does not exist! Please choose either 'bin' " +
										 "or 'ascii'!")
				# NOTREACHED
			end
		end
		o.on("-p", "--password PASSWORD", String, "password used to log in") do |p|
			fcp.password = p
		end
		o.on("-P", "--port PORT", Integer, "FTP port (default: 21)") do |p|
			fcp.port = p.to_s
		end
		o.on("-u", "--user USER", String, "user used to log in") do |u|
			fcp.user = u
		end
		o.on("-r", "--recursive", "copy directories recursively") do
			fcp.recursive = true # enable recursive copy
		end
		o.on("-s", "--safe", "safe mode (ask the user before overwriting file)") do
			fcp.safe = true # enable safe mode
		end
		o.on("-v", "--verbose", "enable verbose mode") { Logger.enable_verbose }
	end
	opts.parse!

	if ARGV.length < 2
		Logger.err("Invalid # of arguments ! You have to specify at least a " +
		             "source and a target !")
		# NOTREACHED
	end

	source = ARGV[0..ARGV.length-2]
	target = ARGV[ARGV.length-1]

	# empty stdin buffer
	while !ARGV.pop.nil? ; end

	# XXX 
	fcp.cp_to_ftp(source, target)
end
